{"version":3,"sources":["webpack://@podlove/player/./src/components/tab-share/index.js","webpack://@podlove/player/./src/components/tab-title/index.js","webpack://@podlove/player/../packages/components/src/components/channel/index.js","webpack://@podlove/player/../packages/components/src/components/input-checkbox/index.js","webpack://@podlove/player/../packages/components/src/components/tooltip/index.js","webpack://@podlove/player/../packages/player/actions/embed.js","webpack://@podlove/player/../packages/player/actions/share.js","webpack://@podlove/player/../node_modules/copy-to-clipboard/index.js","webpack://@podlove/player/../node_modules/toggle-selection/index.js"],"names":["require","selectEmbedSize","createAction","SELECT_EMBED_SIZE","selectContent","SELECT_CONTENT","selectChannel","SELECT_CHANNEL","deselectCurrent","module","exports","text","options","debug","message","reselectPrevious","range","selection","mark","success","document","createRange","getSelection","createElement","textContent","style","all","position","top","clip","whiteSpace","webkitUserSelect","MozUserSelect","msUserSelect","userSelect","addEventListener","e","stopPropagation","format","preventDefault","clipboardData","clearData","setData","body","appendChild","selectNodeContents","addRange","execCommand","Error","err","console","error","warn","window","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","type","forEach","focus"],"mappings":";gJAAA,QAAeA,QAAf,G,8CCAA,QAAeA,SAAf,G,6CCAA,QAAeA,SAAf,G,8CCAA,QAAeA,SAAf,G,8CCAA,QAAeA,SAAf,G,wECGaC,GAAkBC,OAAaC,O,gFCA/BC,GAAgBF,OAAaG,MAC7BC,GAAgBJ,OAAaK,O,6BCF1C,IAAIC,EAAkB,EAAQ,OA2F9BC,EAAOC,QAlFP,SAAcC,EAAMC,GAClB,IAAIC,EACFC,EACAC,EACAC,EACAC,EACAC,EACAC,GAAU,EACPP,IACHA,EAAU,IAEZC,EAAQD,EAAQC,QAAS,EACzB,IAoCE,GAnCAE,EAAmBP,IAEnBQ,EAAQI,SAASC,cACjBJ,EAAYG,SAASE,gBAErBJ,EAAOE,SAASG,cAAc,SACzBC,YAAcb,EAEnBO,EAAKO,MAAMC,IAAM,QAEjBR,EAAKO,MAAME,SAAW,QACtBT,EAAKO,MAAMG,IAAM,EACjBV,EAAKO,MAAMI,KAAO,mBAElBX,EAAKO,MAAMK,WAAa,MAExBZ,EAAKO,MAAMM,iBAAmB,OAC9Bb,EAAKO,MAAMO,cAAgB,OAC3Bd,EAAKO,MAAMQ,aAAe,OAC1Bf,EAAKO,MAAMS,WAAa,OACxBhB,EAAKiB,iBAAiB,QAAQ,SAASC,GACrCA,EAAEC,kBACEzB,EAAQ0B,SACVF,EAAEG,iBACFH,EAAEI,cAAcC,YAChBL,EAAEI,cAAcE,QAAQ9B,EAAQ0B,OAAQ3B,OAI5CS,SAASuB,KAAKC,YAAY1B,GAE1BF,EAAM6B,mBAAmB3B,GACzBD,EAAU6B,SAAS9B,IAEFI,SAAS2B,YAAY,QAEpC,MAAM,IAAIC,MAAM,iCAElB7B,GAAU,EACV,MAAO8B,GACPpC,GAASqC,QAAQC,MAAM,qCAAsCF,GAC7DpC,GAASqC,QAAQE,KAAK,4BACtB,IACEC,OAAOb,cAAcE,QAAQ9B,EAAQ0B,QAAU,OAAQ3B,GACvDQ,GAAU,EACV,MAAO8B,GACPpC,GAASqC,QAAQC,MAAM,uCAAwCF,GAC/DpC,GAASqC,QAAQC,MAAM,0BACvBrC,EAlEN,SAAgBA,GACd,IAAIwC,GAAW,YAAYC,KAAKC,UAAUC,WAAa,IAAM,QAAU,KACvE,OAAO3C,EAAQ4C,QAAQ,gBAAiBJ,GAgE1BhB,CAAO,YAAa1B,EAAUA,EAAQE,QApEjC,oCAqEfuC,OAAOM,OAAO7C,EAASH,IAEzB,QACIM,IACkC,mBAAzBA,EAAU2C,YACnB3C,EAAU2C,YAAY5C,GAEtBC,EAAU4C,mBAIV3C,GACFE,SAASuB,KAAKmB,YAAY5C,GAE5BH,IAGF,OAAOI,I,UCzFTV,EAAOC,QAAU,WACf,IAAIO,EAAYG,SAASE,eACzB,IAAKL,EAAU8C,WACb,OAAO,aAKT,IAHA,IAAIC,EAAS5C,SAAS6C,cAElBC,EAAS,GACJC,EAAI,EAAGA,EAAIlD,EAAU8C,WAAYI,IACxCD,EAAOE,KAAKnD,EAAUoD,WAAWF,IAGnC,OAAQH,EAAOM,QAAQC,eACrB,IAAK,QACL,IAAK,WACHP,EAAOQ,OACP,MAEF,QACER,EAAS,KAKb,OADA/C,EAAU4C,kBACH,WACc,UAAnB5C,EAAUwD,MACVxD,EAAU4C,kBAEL5C,EAAU8C,YACbG,EAAOQ,SAAQ,SAAS1D,GACtBC,EAAU6B,SAAS9B,MAIvBgD,GACAA,EAAOW","file":"712.js","sourcesContent":["export default require('./TabShare').default\n","export default require('./TabTitle').default\n","export default require('./Channel').default\n","export default require('./InputCheckbox').default\n","export default require('./Tooltip').default\n","import { createAction } from 'redux-actions'\nimport { SELECT_EMBED_SIZE } from './types'\n\nexport const selectEmbedSize = createAction(SELECT_EMBED_SIZE)\n","import { createAction } from 'redux-actions'\nimport { SELECT_CONTENT, SELECT_CHANNEL } from './types'\n\nexport const selectContent = createAction(SELECT_CONTENT)\nexport const selectChannel = createAction(SELECT_CHANNEL)\n","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"âŒ˜\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        e.clipboardData.clearData();\n        e.clipboardData.setData(options.format, text);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n"],"sourceRoot":""}